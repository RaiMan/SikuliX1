
# doc strings
Error=Exception that is the base class of all other error exceptions.

Warning=Exception raised for important warnings like data truncations \
while inserting, etc.

InterfaceError=Exception raised for errors that are related to the database \
interface rather than the database itself.

DatabaseError=Exception raised for errors that are related to the database.

InternalError=Exception raised when the database encounters an internal error, \
e.g. the cursor is not valid anymore, the transaction is out of sync, etc.

OperationalError=Exception raised for errors that are related to the database's \
operation and not necessarily under the control of the programmer, e.g. an \
unexpected disconnect occurs, the data source name is not found, a transaction \
could not be processed, a memory allocation error occurred during processing, etc.

ProgrammingError=Exception raised for programming errors, e.g. table not found or \
already exists, syntax error in the SQL statement, wrong number of parameters \
specified, etc.

IntegrityError=Exception raised when the relational integrity of the database is \
affected, e.g. a foreign key check fails.

DataError=Exception raised for errors that are due to problems with the processed \
data like division by zero, numeric value out of range, etc.

NotSupportedError=Exception raised in case a method or database API was used which \
is not supported by the database, e.g. requesting a .rollback() on a connection that \
does not support transaction or has transactions turned off.

# BCP
bcp.0=bcp(table, [where=None, params=None, include=None, exclude=None, toTable=None, bindings=None])
bcp.1=\ Copies data resulting from a query on the source to the appropriate table on the \
destination.  Returns the count of the total number of rows bulk copied or -1 if the \
query on the source returned no rows.  If the destination excludes all the columns an \
Error will be raised.
bcp.2=\ table    - the table to query on the source database
bcp.3=\ where    - an optional where clause, defaults to (1=1) if None
bcp.4=\ params   - optional params to substituted in the where clause
bcp.5=\ include  - the columns to be queried from the source, * if None
bcp.6=\ exclude  - the columns to be excluded from insertion on the destination, all if None
bcp.7=\ toTable  - if non-None, the table in the destination db, otherwise the same table as the source
bcp.8=\ bindings - the optional bindings for the destination, this allows morphing of types during the copy

batchsize=the batch interval for inserts
queuesize=the maximum number of objects the queue can hold, 0 means unbounded (the default)

# PyConnection

close.0=Close the connection now (rather than whenever __del__ is called).
close.1=The connection will be unusable from this point forward; an Error \
(or subclass) exception will be raised if any operation is attempted \
with the connection. The same applies to all cursor objects trying \
to use the connection.

commit.0=Commit any pending transaction to the database.
commit.1=Note that if the database supports an auto-commit feature, this \
must be initially off. An interface method may be provided to turn it back on.

cursor.0=cursor([dynamic=0])
cursor.1=\ Return a new Cursor Object using the connection.
cursor.2=\ dynamic - If non-zero, return a Cursor that does NOT iterate the results immediately.
cursor.3=\           This greatly increases the performance of large result sets, but fails to
cursor.4=\           set the .rowcount attribute on the Cursor.
cursor.5=If the database does not provide a direct cursor concept, the module \
will have to emulate cursors using other means to the extent needed by this \
specification.

rollback.0=This method is optional since not all databases provide transaction support.
rollback.1=In case a database does provide transactions this method causes the database \
to roll back to the start of any pending transaction. Closing a connection \
without committing the changes first will cause an implicit rollback to be \
performed.

nativesql.0=Converts the given SQL statement into the system's native SQL grammar.
nativesql.1=A driver may convert the JDBC sql grammar into its system's native SQL \
grammar prior to sending it; this method returns the native form of the statement \
that the driver would have sent.

updateCountDeprecation=The use of UpdateCountDataHandler is deprecated in favor of \
the .updatecount attribute on a cursor.

# exception messages
noStoredProc=stored procedures not implemented in db
optionalSecond=optional second argument must be a list or tuple
bindingValue=binding value must be a valid integer type from java.sql.Types
onlyOneResultSet=dynamic fetch allows only one result set
inconsistentRowCount=number of rows queried [{0,integer}] does not match number of rows inserted [{1,integer}]
invalidCons=invalid constructor for class [{0}]
noColInfo=unable to obtain column info
excludedAllCols=excluded all columns
invalidTableName=invalid table name [None]
unsupportedTypeForColumn=type [{0}] is not supported for column index: {1}
maybeCallproc=use .callproc() for stored procedures
nodynamiccursors=this version of jdbc does not support dynamic cursors
nocallprocsupport=dynamic cursor does not support .callproc; use static cursors instead

