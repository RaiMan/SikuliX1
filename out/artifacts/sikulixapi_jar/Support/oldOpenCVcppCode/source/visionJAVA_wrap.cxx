/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "vision.h"
#include "sikuli-debug.h"
#include <iostream>
#include "opencv.hpp"
//#include "cvgui.h" not used
#include "tessocr.h"


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>

SWIGINTERN std::vector< FindResult >::const_reference std_vector_Sl_FindResult_Sg__get(std::vector< FindResult > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_FindResult_Sg__set(std::vector< FindResult > *self,int i,std::vector< FindResult >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OCRChar >::const_reference std_vector_Sl_OCRChar_Sg__get(std::vector< OCRChar > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OCRChar_Sg__set(std::vector< OCRChar > *self,int i,std::vector< OCRChar >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OCRWord >::const_reference std_vector_Sl_OCRWord_Sg__get(std::vector< OCRWord > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OCRWord_Sg__set(std::vector< OCRWord > *self,int i,std::vector< OCRWord >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OCRLine >::const_reference std_vector_Sl_OCRLine_Sg__get(std::vector< OCRLine > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OCRLine_Sg__set(std::vector< OCRLine > *self,int i,std::vector< OCRLine >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< OCRParagraph >::const_reference std_vector_Sl_OCRParagraph_Sg__get(std::vector< OCRParagraph > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_OCRParagraph_Sg__set(std::vector< OCRParagraph > *self,int i,std::vector< OCRParagraph >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1FindResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< FindResult > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< FindResult > *)new std::vector< FindResult >();
  *(std::vector< FindResult > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1FindResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< FindResult >::size_type arg1 ;
  std::vector< FindResult > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< FindResult >::size_type)jarg1; 
  result = (std::vector< FindResult > *)new std::vector< FindResult >(arg1);
  *(std::vector< FindResult > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResults_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< FindResult > *arg1 = (std::vector< FindResult > *) 0 ;
  std::vector< FindResult >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FindResult > **)&jarg1; 
  result = ((std::vector< FindResult > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResults_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< FindResult > *arg1 = (std::vector< FindResult > *) 0 ;
  std::vector< FindResult >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FindResult > **)&jarg1; 
  result = ((std::vector< FindResult > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResults_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< FindResult > *arg1 = (std::vector< FindResult > *) 0 ;
  std::vector< FindResult >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FindResult > **)&jarg1; 
  arg2 = (std::vector< FindResult >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResults_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< FindResult > *arg1 = (std::vector< FindResult > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FindResult > **)&jarg1; 
  result = (bool)((std::vector< FindResult > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResults_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< FindResult > *arg1 = (std::vector< FindResult > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FindResult > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResults_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< FindResult > *arg1 = (std::vector< FindResult > *) 0 ;
  std::vector< FindResult >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< FindResult > **)&jarg1; 
  arg2 = *(std::vector< FindResult >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< FindResult >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< FindResult >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResults_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< FindResult > *arg1 = (std::vector< FindResult > *) 0 ;
  int arg2 ;
  std::vector< FindResult >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< FindResult > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< FindResult >::value_type *) &std_vector_Sl_FindResult_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< FindResult >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResults_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< FindResult > *arg1 = (std::vector< FindResult > *) 0 ;
  int arg2 ;
  std::vector< FindResult >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< FindResult > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< FindResult >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< FindResult >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_FindResult_Sg__set(arg1,arg2,(FindResult const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1FindResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< FindResult > *arg1 = (std::vector< FindResult > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< FindResult > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRChars_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OCRChar > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OCRChar > *)new std::vector< OCRChar >();
  *(std::vector< OCRChar > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRChars_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OCRChar >::size_type arg1 ;
  std::vector< OCRChar > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OCRChar >::size_type)jarg1; 
  result = (std::vector< OCRChar > *)new std::vector< OCRChar >(arg1);
  *(std::vector< OCRChar > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRChars_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OCRChar > *arg1 = (std::vector< OCRChar > *) 0 ;
  std::vector< OCRChar >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRChar > **)&jarg1; 
  result = ((std::vector< OCRChar > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRChars_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OCRChar > *arg1 = (std::vector< OCRChar > *) 0 ;
  std::vector< OCRChar >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRChar > **)&jarg1; 
  result = ((std::vector< OCRChar > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRChars_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OCRChar > *arg1 = (std::vector< OCRChar > *) 0 ;
  std::vector< OCRChar >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRChar > **)&jarg1; 
  arg2 = (std::vector< OCRChar >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRChars_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OCRChar > *arg1 = (std::vector< OCRChar > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRChar > **)&jarg1; 
  result = (bool)((std::vector< OCRChar > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRChars_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OCRChar > *arg1 = (std::vector< OCRChar > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRChar > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRChars_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OCRChar > *arg1 = (std::vector< OCRChar > *) 0 ;
  std::vector< OCRChar >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OCRChar > **)&jarg1; 
  arg2 = *(std::vector< OCRChar >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OCRChar >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OCRChar >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRChars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OCRChar > *arg1 = (std::vector< OCRChar > *) 0 ;
  int arg2 ;
  std::vector< OCRChar >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRChar > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OCRChar >::value_type *) &std_vector_Sl_OCRChar_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OCRChar >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRChars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OCRChar > *arg1 = (std::vector< OCRChar > *) 0 ;
  int arg2 ;
  std::vector< OCRChar >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OCRChar > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OCRChar >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OCRChar >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OCRChar_Sg__set(arg1,arg2,(OCRChar const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1OCRChars(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OCRChar > *arg1 = (std::vector< OCRChar > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OCRChar > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRWords_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OCRWord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OCRWord > *)new std::vector< OCRWord >();
  *(std::vector< OCRWord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRWords_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OCRWord >::size_type arg1 ;
  std::vector< OCRWord > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OCRWord >::size_type)jarg1; 
  result = (std::vector< OCRWord > *)new std::vector< OCRWord >(arg1);
  *(std::vector< OCRWord > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRWords_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OCRWord > *arg1 = (std::vector< OCRWord > *) 0 ;
  std::vector< OCRWord >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRWord > **)&jarg1; 
  result = ((std::vector< OCRWord > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRWords_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OCRWord > *arg1 = (std::vector< OCRWord > *) 0 ;
  std::vector< OCRWord >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRWord > **)&jarg1; 
  result = ((std::vector< OCRWord > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRWords_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OCRWord > *arg1 = (std::vector< OCRWord > *) 0 ;
  std::vector< OCRWord >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRWord > **)&jarg1; 
  arg2 = (std::vector< OCRWord >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRWords_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OCRWord > *arg1 = (std::vector< OCRWord > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRWord > **)&jarg1; 
  result = (bool)((std::vector< OCRWord > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRWords_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OCRWord > *arg1 = (std::vector< OCRWord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRWord > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRWords_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OCRWord > *arg1 = (std::vector< OCRWord > *) 0 ;
  std::vector< OCRWord >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OCRWord > **)&jarg1; 
  arg2 = *(std::vector< OCRWord >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OCRWord >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OCRWord >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRWords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OCRWord > *arg1 = (std::vector< OCRWord > *) 0 ;
  int arg2 ;
  std::vector< OCRWord >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRWord > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OCRWord >::value_type *) &std_vector_Sl_OCRWord_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OCRWord >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRWords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OCRWord > *arg1 = (std::vector< OCRWord > *) 0 ;
  int arg2 ;
  std::vector< OCRWord >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OCRWord > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OCRWord >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OCRWord >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OCRWord_Sg__set(arg1,arg2,(OCRWord const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1OCRWords(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OCRWord > *arg1 = (std::vector< OCRWord > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OCRWord > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OCRLine > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OCRLine > *)new std::vector< OCRLine >();
  *(std::vector< OCRLine > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OCRLine >::size_type arg1 ;
  std::vector< OCRLine > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OCRLine >::size_type)jarg1; 
  result = (std::vector< OCRLine > *)new std::vector< OCRLine >(arg1);
  *(std::vector< OCRLine > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRLines_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OCRLine > *arg1 = (std::vector< OCRLine > *) 0 ;
  std::vector< OCRLine >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRLine > **)&jarg1; 
  result = ((std::vector< OCRLine > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRLines_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OCRLine > *arg1 = (std::vector< OCRLine > *) 0 ;
  std::vector< OCRLine >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRLine > **)&jarg1; 
  result = ((std::vector< OCRLine > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRLines_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OCRLine > *arg1 = (std::vector< OCRLine > *) 0 ;
  std::vector< OCRLine >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRLine > **)&jarg1; 
  arg2 = (std::vector< OCRLine >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRLines_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OCRLine > *arg1 = (std::vector< OCRLine > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRLine > **)&jarg1; 
  result = (bool)((std::vector< OCRLine > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRLines_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OCRLine > *arg1 = (std::vector< OCRLine > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRLine > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRLines_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OCRLine > *arg1 = (std::vector< OCRLine > *) 0 ;
  std::vector< OCRLine >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OCRLine > **)&jarg1; 
  arg2 = *(std::vector< OCRLine >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OCRLine >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OCRLine >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRLines_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OCRLine > *arg1 = (std::vector< OCRLine > *) 0 ;
  int arg2 ;
  std::vector< OCRLine >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRLine > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OCRLine >::value_type *) &std_vector_Sl_OCRLine_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OCRLine >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRLines_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OCRLine > *arg1 = (std::vector< OCRLine > *) 0 ;
  int arg2 ;
  std::vector< OCRLine >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OCRLine > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OCRLine >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OCRLine >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OCRLine_Sg__set(arg1,arg2,(OCRLine const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1OCRLines(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OCRLine > *arg1 = (std::vector< OCRLine > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OCRLine > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRParagraphs_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< OCRParagraph > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< OCRParagraph > *)new std::vector< OCRParagraph >();
  *(std::vector< OCRParagraph > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRParagraphs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< OCRParagraph >::size_type arg1 ;
  std::vector< OCRParagraph > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< OCRParagraph >::size_type)jarg1; 
  result = (std::vector< OCRParagraph > *)new std::vector< OCRParagraph >(arg1);
  *(std::vector< OCRParagraph > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRParagraphs_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OCRParagraph > *arg1 = (std::vector< OCRParagraph > *) 0 ;
  std::vector< OCRParagraph >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRParagraph > **)&jarg1; 
  result = ((std::vector< OCRParagraph > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRParagraphs_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< OCRParagraph > *arg1 = (std::vector< OCRParagraph > *) 0 ;
  std::vector< OCRParagraph >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRParagraph > **)&jarg1; 
  result = ((std::vector< OCRParagraph > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRParagraphs_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< OCRParagraph > *arg1 = (std::vector< OCRParagraph > *) 0 ;
  std::vector< OCRParagraph >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRParagraph > **)&jarg1; 
  arg2 = (std::vector< OCRParagraph >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRParagraphs_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< OCRParagraph > *arg1 = (std::vector< OCRParagraph > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRParagraph > **)&jarg1; 
  result = (bool)((std::vector< OCRParagraph > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRParagraphs_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< OCRParagraph > *arg1 = (std::vector< OCRParagraph > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRParagraph > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRParagraphs_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< OCRParagraph > *arg1 = (std::vector< OCRParagraph > *) 0 ;
  std::vector< OCRParagraph >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< OCRParagraph > **)&jarg1; 
  arg2 = *(std::vector< OCRParagraph >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OCRParagraph >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< OCRParagraph >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRParagraphs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< OCRParagraph > *arg1 = (std::vector< OCRParagraph > *) 0 ;
  int arg2 ;
  std::vector< OCRParagraph >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< OCRParagraph > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< OCRParagraph >::value_type *) &std_vector_Sl_OCRParagraph_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< OCRParagraph >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRParagraphs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< OCRParagraph > *arg1 = (std::vector< OCRParagraph > *) 0 ;
  int arg2 ;
  std::vector< OCRParagraph >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< OCRParagraph > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< OCRParagraph >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< OCRParagraph >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_OCRParagraph_Sg__set(arg1,arg2,(OCRParagraph const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1OCRParagraphs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< OCRParagraph > *arg1 = (std::vector< OCRParagraph > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< OCRParagraph > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResult_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FindResult *arg1 = (FindResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResult_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FindResult *arg1 = (FindResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindResult **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResult_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FindResult *arg1 = (FindResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResult_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FindResult *arg1 = (FindResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindResult **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResult_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FindResult *arg1 = (FindResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT jint JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResult_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FindResult *arg1 = (FindResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindResult **)&jarg1; 
  result = (int) ((arg1)->w);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResult_1h_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FindResult *arg1 = (FindResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT jint JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResult_1h_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FindResult *arg1 = (FindResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindResult **)&jarg1; 
  result = (int) ((arg1)->h);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResult_1score_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FindResult *arg1 = (FindResult *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindResult **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResult_1score_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FindResult *arg1 = (FindResult *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindResult **)&jarg1; 
  result = (double) ((arg1)->score);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1FindResult_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FindResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FindResult *)new FindResult();
  *(FindResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1FindResult_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  FindResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  result = (FindResult *)new FindResult(arg1,arg2,arg3,arg4,arg5);
  *(FindResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResult_1text_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FindResult *arg1 = (FindResult *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindResult **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->text = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindResult_1text_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FindResult *arg1 = (FindResult *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FindResult **)&jarg1; 
  result = (std::string *) & ((arg1)->text);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1FindResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FindResult *arg1 = (FindResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FindResult **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRRect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OCRRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OCRRect *)new OCRRect();
  *(OCRRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRRect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  OCRRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (OCRRect *)new OCRRect(arg1,arg2,arg3,arg4);
  *(OCRRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRRect_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OCRRect *arg1 = (OCRRect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRRect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRRect_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OCRRect *arg1 = (OCRRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRRect **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRRect_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OCRRect *arg1 = (OCRRect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRRect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRRect_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OCRRect *arg1 = (OCRRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRRect **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRRect_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OCRRect *arg1 = (OCRRect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRRect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT jint JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRRect_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OCRRect *arg1 = (OCRRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRRect **)&jarg1; 
  result = (int) ((arg1)->height);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRRect_1width_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OCRRect *arg1 = (OCRRect *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRRect **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT jint JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRRect_1width_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OCRRect *arg1 = (OCRRect *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRRect **)&jarg1; 
  result = (int) ((arg1)->width);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1OCRRect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OCRRect *arg1 = (OCRRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OCRRect **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRChar(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  OCRChar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (OCRChar *)new OCRChar((std::string const &)*arg1,arg2,arg3,arg4,arg5);
  *(OCRChar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRChar_1ch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OCRChar *arg1 = (OCRChar *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRChar **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ch = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRChar_1ch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OCRChar *arg1 = (OCRChar *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRChar **)&jarg1; 
  result = (std::string *) & ((arg1)->ch);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1OCRChar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OCRChar *arg1 = (OCRChar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OCRChar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRWord_1score_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OCRWord *arg1 = (OCRWord *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRWord **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRWord_1score_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OCRWord *arg1 = (OCRWord *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRWord **)&jarg1; 
  result = (float) ((arg1)->score);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRWord_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OCRWord *arg1 = (OCRWord *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRWord **)&jarg1; 
  result = (arg1)->getString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRWord_1getChars(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OCRWord *arg1 = (OCRWord *) 0 ;
  std::vector< OCRChar > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRWord **)&jarg1; 
  result = (arg1)->getChars();
  *(std::vector< OCRChar > **)&jresult = new std::vector< OCRChar >((const std::vector< OCRChar > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRWord(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OCRWord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OCRWord *)new OCRWord();
  *(OCRWord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1OCRWord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OCRWord *arg1 = (OCRWord *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OCRWord **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRLine_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OCRLine *arg1 = (OCRLine *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRLine **)&jarg1; 
  result = (arg1)->getString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRLine_1getWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OCRLine *arg1 = (OCRLine *) 0 ;
  std::vector< OCRWord > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRLine **)&jarg1; 
  result = (arg1)->getWords();
  *(std::vector< OCRWord > **)&jresult = new std::vector< OCRWord >((const std::vector< OCRWord > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRLine(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OCRLine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OCRLine *)new OCRLine();
  *(OCRLine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1OCRLine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OCRLine *arg1 = (OCRLine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OCRLine **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRParagraph_1getLines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OCRParagraph *arg1 = (OCRParagraph *) 0 ;
  std::vector< OCRLine > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRParagraph **)&jarg1; 
  result = (arg1)->getLines();
  *(std::vector< OCRLine > **)&jresult = new std::vector< OCRLine >((const std::vector< OCRLine > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRParagraph(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OCRParagraph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OCRParagraph *)new OCRParagraph();
  *(OCRParagraph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1OCRParagraph(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OCRParagraph *arg1 = (OCRParagraph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OCRParagraph **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRText_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OCRText *arg1 = (OCRText *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRText **)&jarg1; 
  result = (arg1)->getString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRText_1getWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OCRText *arg1 = (OCRText *) 0 ;
  std::vector< OCRWord > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRText **)&jarg1; 
  result = (arg1)->getWords();
  *(std::vector< OCRWord > **)&jresult = new std::vector< OCRWord >((const std::vector< OCRWord > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRText_1getParagraphs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OCRText *arg1 = (OCRText *) 0 ;
  std::vector< OCRParagraph > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OCRText **)&jarg1; 
  result = (arg1)->getParagraphs();
  *(std::vector< OCRParagraph > **)&jresult = new std::vector< OCRParagraph >((const std::vector< OCRParagraph > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCRText(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OCRText *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OCRText *)new OCRText();
  *(OCRText **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1OCRText(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OCRText *arg1 = (OCRText *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OCRText **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1FindInput_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sikuli::FindInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (sikuli::FindInput *)new sikuli::FindInput();
  *(sikuli::FindInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1FindInput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cv::Mat arg1 ;
  cv::Mat arg2 ;
  cv::Mat *argp1 ;
  cv::Mat *argp2 ;
  sikuli::FindInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cv::Mat **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cv::Mat");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cv::Mat **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cv::Mat");
    return 0;
  }
  arg2 = *argp2; 
  result = (sikuli::FindInput *)new sikuli::FindInput(arg1,arg2);
  *(sikuli::FindInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1FindInput_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  cv::Mat arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  cv::Mat *argp1 ;
  sikuli::FindInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cv::Mat **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cv::Mat");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (sikuli::FindInput *)new sikuli::FindInput(arg1,arg2,(char const *)arg3);
  *(sikuli::FindInput **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1FindInput_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  sikuli::FindInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (sikuli::FindInput *)new sikuli::FindInput((char const *)arg1,arg2,(char const *)arg3);
  *(sikuli::FindInput **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1FindInput_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  cv::Mat arg1 ;
  int arg2 ;
  cv::Mat *argp1 ;
  sikuli::FindInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cv::Mat **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cv::Mat");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2; 
  result = (sikuli::FindInput *)new sikuli::FindInput(arg1,arg2);
  *(sikuli::FindInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1FindInput_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  sikuli::FindInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (sikuli::FindInput *)new sikuli::FindInput((char const *)arg1,arg2);
  *(sikuli::FindInput **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1FindInput_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  cv::Mat arg1 ;
  sikuli::FindInput arg2 ;
  cv::Mat *argp1 ;
  sikuli::FindInput const *argp2 ;
  sikuli::FindInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cv::Mat **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cv::Mat");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(sikuli::FindInput **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sikuli::FindInput const");
    return 0;
  }
  arg2 = *argp2; 
  result = (sikuli::FindInput *)new sikuli::FindInput(arg1,arg2);
  *(sikuli::FindInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1setSource_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setSource((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1setTarget_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setTarget(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1setSource_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  cv::Mat arg2 ;
  cv::Mat *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  argp2 = *(cv::Mat **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cv::Mat");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setSource(arg2);
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1setTarget_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  cv::Mat arg2 ;
  cv::Mat *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  argp2 = *(cv::Mat **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cv::Mat");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTarget(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1getSourceMat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  cv::Mat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  result = (arg1)->getSourceMat();
  *(cv::Mat **)&jresult = new cv::Mat((const cv::Mat &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1getTargetMat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  cv::Mat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  result = (arg1)->getTargetMat();
  *(cv::Mat **)&jresult = new cv::Mat((const cv::Mat &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1setFindAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setFindAll(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1isFindingAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  result = (bool)(arg1)->isFindingAll();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1setLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLimit(arg2);
}


SWIGEXPORT jint JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1getLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  result = (int)(arg1)->getLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1setSimilarity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSimilarity(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1getSimilarity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  result = (double)(arg1)->getSimilarity();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1getTargetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  result = (int)(arg1)->getTargetType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sikuli_natives_VisionProxyJNI_FindInput_1getTargetText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  result = (arg1)->getTargetText();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1FindInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sikuli::FindInput *arg1 = (sikuli::FindInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sikuli::FindInput **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_Vision_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sikuli::FindInput arg1 ;
  sikuli::FindInput *argp1 ;
  std::vector< FindResult > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(sikuli::FindInput **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sikuli::FindInput");
    return 0;
  }
  arg1 = *argp1; 
  result = sikuli::Vision::find(arg1);
  *(std::vector< FindResult > **)&jresult = new std::vector< FindResult >((const std::vector< FindResult > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_Vision_1findChanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  sikuli::FindInput arg1 ;
  sikuli::FindInput *argp1 ;
  std::vector< FindResult > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(sikuli::FindInput **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null sikuli::FindInput");
    return 0;
  }
  arg1 = *argp1; 
  result = sikuli::Vision::findChanges(arg1);
  *(std::vector< FindResult > **)&jresult = new std::vector< FindResult >((const std::vector< FindResult > &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sikuli_natives_VisionProxyJNI_Vision_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  cv::Mat arg1 ;
  cv::Mat arg2 ;
  cv::Mat *argp1 ;
  cv::Mat *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(cv::Mat **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cv::Mat");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(cv::Mat **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cv::Mat");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)sikuli::Vision::compare(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_Vision_1initOCR(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  sikuli::Vision::initOCR((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_Vision_1recognize_1as_1ocrtext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  cv::Mat arg1 ;
  cv::Mat *argp1 ;
  OCRText result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cv::Mat **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cv::Mat");
    return 0;
  }
  arg1 = *argp1; 
  result = sikuli::Vision::recognize_as_ocrtext(arg1);
  *(OCRText **)&jresult = new OCRText((const OCRText &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sikuli_natives_VisionProxyJNI_Vision_1recognize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cv::Mat arg1 ;
  cv::Mat *argp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cv::Mat **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cv::Mat");
    return 0;
  }
  arg1 = *argp1; 
  result = sikuli::Vision::recognize(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sikuli_natives_VisionProxyJNI_Vision_1recognizeWord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  cv::Mat arg1 ;
  cv::Mat *argp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(cv::Mat **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null cv::Mat");
    return 0;
  }
  arg1 = *argp1; 
  result = sikuli::Vision::recognizeWord(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_Vision_1createMat(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jbyteArray jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  cv::Mat result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  {
    long len = jenv->GetArrayLength(jarg3);
    arg3 = (unsigned char *)malloc(len + 1);
    if (arg3 == 0) {
      std::cerr << "out of memory\n";
      return 0;
    }
    jenv->GetByteArrayRegion(jarg3, 0, len, (jbyte *)arg3);
  }
  result = sikuli::Vision::createMat(arg1,arg2,arg3);
  *(cv::Mat **)&jresult = new cv::Mat((const cv::Mat &)result); 
  
  free(arg3);
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_Vision_1setParameter(JNIEnv *jenv, jclass jcls, jstring jarg1, jfloat jarg2) {
  std::string arg1 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (float)jarg2; 
  sikuli::Vision::setParameter(arg1,arg2);
}


SWIGEXPORT jfloat JNICALL Java_org_sikuli_natives_VisionProxyJNI_Vision_1getParameter(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jfloat jresult = 0 ;
  std::string arg1 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (float)sikuli::Vision::getParameter(arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_Vision_1setSParameter(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  std::string arg1 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  sikuli::Vision::setSParameter(arg1,arg2);
}


SWIGEXPORT jstring JNICALL Java_org_sikuli_natives_VisionProxyJNI_Vision_1getSParameter(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = sikuli::Vision::getSParameter(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1Vision(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  sikuli::Vision *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (sikuli::Vision *)new sikuli::Vision();
  *(sikuli::Vision **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1Vision(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  sikuli::Vision *arg1 = (sikuli::Vision *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(sikuli::Vision **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_setDebug(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  sikuli::DebugCategories arg1 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (sikuli::DebugCategories)jarg1; 
  arg2 = (int)jarg2; 
  sikuli::setDebug(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCR_1setParameter(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  std::string arg1 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  OCR::setParameter(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1OCR(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OCR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OCR *)new OCR();
  *(OCR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1OCR(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OCR *arg1 = (OCR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OCR **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_new_1Mat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  cv::Mat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (cv::Mat *)new cv::Mat();
  *(cv::Mat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sikuli_natives_VisionProxyJNI_delete_1Mat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  cv::Mat *arg1 = (cv::Mat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(cv::Mat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRChar_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OCRRect **)&baseptr = *(OCRChar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRWord_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OCRRect **)&baseptr = *(OCRWord **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRLine_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OCRRect **)&baseptr = *(OCRLine **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRParagraph_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OCRRect **)&baseptr = *(OCRParagraph **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_sikuli_natives_VisionProxyJNI_OCRText_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OCRRect **)&baseptr = *(OCRText **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

